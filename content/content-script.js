// content/content-script.js
(async () => {
  console.log("üöÄ content-script charg√©");

  window.addEventListener("load", async () => {
    console.log("üìÑ page load event re√ßu");

    function sendNote(note) {
      chrome.runtime.sendMessage({ note, type: "NOTE" });
    }
    await new Promise((r) => setTimeout(r, 10000));

    // 1) Rejeter les cookies si pr√©sents
    const rejectBtn = document.getElementById("onetrust-reject-all-handler");
    if (rejectBtn) {
      rejectBtn.click();
      console.log("‚úÖ Cookies rejet√©s");
      sendNote("‚úÖ Cookies rejet√©s");
    }

    // 2) Petit d√©lai pour √™tre s√ªr que le bouton Check Availability est rendu
    await new Promise((r) => setTimeout(r, 1000));
    console.log("‚åõ 1 s de d√©lai avant de cliquer sur Check Availability");
    sendNote("‚åõ 1 s de d√©lai avant de cliquer sur Check Availability");

    // 3) Cliquer sur Check Availability
    const checkBtn = document.querySelector("a.ce-book-now-action");
    if (checkBtn) {
      checkBtn.click();
      console.log("‚úÖ 'Check Availability' cliqu√©");
      sendNote("‚úÖ 'Check Availability' cliqu√©");
      // Attendre 2 secondes puis cliquer sur le bouton d'incr√©ment
      await new Promise((r) => setTimeout(r, 4000));
      const incrementBtn = document.querySelector(
        'button.jss1250.jss1337.jss1339.btnBackgroundColor.quantityIconStyle.jss1330[data-bdd="increment-button"]'
      );
      if (incrementBtn) {
        incrementBtn.click();
        console.log("‚úÖ Bouton d'incr√©ment cliqu√©");
        sendNote("‚úÖ Bouton d'incr√©ment cliqu√©");
      } else {
        console.warn("‚ùå Bouton d'incr√©ment introuvable");
        sendNote("‚ùå Bouton d'incr√©ment introuvable");
      }
    } else {
      console.warn("‚ö†Ô∏è Bouton 'Check Availability' introuvable");
      sendNote("‚ö†Ô∏è Bouton 'Check Availability' introuvable");
      return;
    }

    // 4) Fonction utilitaire pour attendre un √©l√©ment
    async function waitForSlot(text, timeout = 15000, interval = 5000) {
      const start = Date.now();
      while (Date.now() - start < timeout) {
        // on cherche les <p> de cr√©neau
        const slot = Array.from(
          document.querySelectorAll("p.jss943.jss951")
        ).find((p) => p.textContent.trim() === text);
        if (slot) return slot;
        await new Promise((r) => setTimeout(r, interval));
      }
      throw new Error("timeout");
    }

    // 5) Attendre et cliquer sur "9:40 AM - 1 remaining"
    async function waitForButtonWithText(text, timeout = 5000, interval = 500) {
      const start = Date.now();
      while (Date.now() - start < timeout) {
        // Cherche tous les boutons visibles
        const buttons = Array.from(document.querySelectorAll("button"));
        for (const btn of buttons) {
          const span = btn.querySelector("span");
          if (span && span.textContent.includes(text)) {
            return btn;
          }
        }
        await new Promise((r) => setTimeout(r, interval));
      }
      throw new Error("timeout");
    }

    // Fonction pour r√©cup√©rer tous les boutons de cr√©neaux horaires
    function getAllTimeSlotButtons() {
      const container = document.querySelector(
        "div.jss786.jss825.jss839.jss847.jss709"
      );
      if (!container) return [];
      return Array.from(container.querySelectorAll("button"));
    }

    try {
      console.log("‚è≥ Recherche du cr√©neau '9:40 AM ' (jusqu'√† 5 s)...");
      const slotBtn = await waitForButtonWithText("9:40 AM");
      slotBtn.click();
      console.log("‚úÖ Bouton '9:40 AM ' cliqu√©");
      // Attendre 2 secondes puis cliquer sur le bouton d'incr√©ment
      await new Promise((r) => setTimeout(r, 2000));
      const incrementBtn = document.querySelector(
        'button.jss1250.jss1337.jss1339.btnBackgroundColor.quantityIconStyle.jss1330[data-bdd="increment-button"]'
      );
      if (incrementBtn) {
        incrementBtn.click();
        console.log("‚úÖ Bouton d'incr√©ment cliqu√©");
        sendNote("‚úÖ Bouton d'incr√©ment cliqu√©");
      } else {
        console.warn("‚ùå Bouton d'incr√©ment introuvable");
        sendNote("‚ùå Bouton d'incr√©ment introuvable");
      }
    } catch (err) {
      console.warn("‚ùå Cr√©neau '9:40 AM - 1 remaining' non trouv√© apr√®s 20 s");
      sendNote("‚ùå Cr√©neau '9:40 AM - 1 remaining' non trouv√© apr√®s 20 s");
    }

    // Juste avant d'appeler waitForButtonWithText
    // Afficher les cr√©neaux trouv√©s
    const slotButtons = getAllTimeSlotButtons();
    if (slotButtons.length > 0) {
      const slotsText = slotButtons
        .map((btn) => btn.innerText.replace(/\n/g, " | "))
        .join(" || ");
      sendNote("Cr√©neaux trouv√©s : " + slotsText);
    } else {
      sendNote("Aucun bouton de cr√©neau horaire trouv√©");
    }
  });
})();

// class="jss1250 jss1224 jss1235 jss1236 jss1238 jss1239 jss1248 timeSlotStyle"
// class="jss1250 jss1224 jss1235 jss1236 jss1238 jss1239 jss1248 timeSlotStyle"
